{"ast":null,"code":"import _toConsumableArray from \"C:/Users/paull/Desktop/mad-mobile-coding-challenge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:/Users/paull/Desktop/mad-mobile-coding-challenge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\paull\\\\Desktop\\\\mad-mobile-coding-challenge\\\\src\\\\List\\\\ListMain.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { Card, Col, Row, List, Space, Input } from \"antd\";\nimport { SortAscendingOutlined, SortDescendingOutlined } from \"@ant-design/icons\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setList } from \"../app/features/listSlice\";\nimport ListCard from \"./ListCard/ListCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar selectedSortStyle = {\n  color: \"rgb(36, 67, 153)\"\n};\nvar Search = Input.Search;\nexport default function ListMain(props) {\n  _s();\n\n  var _this = this;\n\n  //General Rule for App: If Edit, update Redux State, for Sort use Comp State\n  var personListSlice = useSelector(function (state) {\n    return state.list.personList;\n  });\n  var isLoading = useSelector(function (state) {\n    return state.list.isLoading;\n  });\n  var dispatch = useDispatch();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      personList = _useState2[0],\n      setPersonList = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      sortFirstNameAscSelected = _useState4[0],\n      setSortFirstNameAscSelected = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      sortFirstNameDescSelected = _useState6[0],\n      setSortFirstNameDescSelected = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      sortLastNameAscSelected = _useState8[0],\n      setSortLastNameAscSelected = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      sortLastNameDescSelected = _useState10[0],\n      setSortLastNameDescSelected = _useState10[1];\n\n  useEffect(function () {\n    var personListRedux = _toConsumableArray(personListSlice);\n\n    setPersonList(personListRedux);\n  }, [personListSlice]);\n\n  var editPerson = function editPerson(data) {\n    console.log(data);\n    var id = data.id,\n        email = data.email;\n\n    var personListTemp = _toConsumableArray(personListSlice);\n\n    personListTemp.forEach(function (p) {\n      if (p.persId === id) {\n        p.email = email;\n      }\n    });\n    dispatch(setList(personList));\n  };\n\n  var editFailed = function editFailed(err) {\n    console.log(err);\n  }; //Will hold the results if there's a personList or not\n\n\n  var cardListOut = \"\";\n\n  if (personList) {\n    //AntDesign Card List, the List.Item is the ListCard.js file\n    //w/ passed in unique id's and keys\n    //edit functions are for lifting up state of any card edits (see above)\n    cardListOut = /*#__PURE__*/_jsxDEV(List, {\n      grid: {\n        gutter: 16,\n        column: 5\n      },\n      dataSource: personList,\n      renderItem: function renderItem(person) {\n        return /*#__PURE__*/_jsxDEV(List.Item, {\n          children: /*#__PURE__*/_jsxDEV(ListCard, {\n            id: person.persId,\n            person: person,\n            loading: isLoading,\n            editPersonFn: editPerson,\n            editFailedFn: editFailed\n          }, person.persId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, _this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this);\n  } else {\n    //Null/empty check\n    cardListOut = /*#__PURE__*/_jsxDEV(Card, {\n      title: \"No Persons\",\n      description: \"We could not find any persons\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this);\n  } //Quick way to reset all the sorting variables for sorting features\n\n\n  var resetAllSortSetters = function resetAllSortSetters() {\n    setSortFirstNameAscSelected(false);\n    setSortFirstNameDescSelected(false);\n    setSortLastNameAscSelected(false);\n    setSortLastNameDescSelected(false);\n  }; //Ascending Sorting\n\n\n  var sortAscending = function sortAscending() {\n    var firstName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    resetAllSortSetters(); //Reset all sorting flags\n\n    if (firstName) {\n      var currentPersonList = _toConsumableArray(personList);\n\n      var sortedNameList = currentPersonList.sort(function (a, b) {\n        return a.name.first.toLowerCase().localeCompare(b.name.first.toLowerCase());\n      });\n      setSortFirstNameAscSelected(true);\n      setPersonList(sortedNameList);\n    } else {\n      //If firstName = false, sort Asc on the last name\n      var _currentPersonList = _toConsumableArray(personList);\n\n      var _sortedNameList = _currentPersonList.sort(function (a, b) {\n        return a.name.last.toLowerCase().localeCompare(b.name.last.toLowerCase());\n      });\n\n      setSortLastNameAscSelected(true);\n      setPersonList(_sortedNameList);\n    }\n  };\n\n  var sortDescending = function sortDescending() {\n    var firstName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    resetAllSortSetters();\n\n    if (firstName) {\n      var currentPersonList = _toConsumableArray(personList);\n\n      var sortedNameList = currentPersonList.sort(function (a, b) {\n        return b.name.first.toLowerCase().localeCompare(a.name.first.toLowerCase());\n      });\n      setSortFirstNameDescSelected(true);\n      setPersonList(sortedNameList);\n    } else {\n      var _currentPersonList2 = _toConsumableArray(personList);\n\n      var _sortedNameList2 = _currentPersonList2.sort(function (a, b) {\n        return b.name.last.toLowerCase().localeCompare(a.name.last.toLowerCase());\n      });\n\n      setSortLastNameDescSelected(true);\n      setPersonList(_sortedNameList2);\n    }\n  }; //Filtering the list via user input (the search bar on the screen)\n\n\n  var filterByInput = function filterByInput(value) {\n    //Since we're not sorting, clear the flags\n    resetAllSortSetters(); //I've decided to filter on both the first or last names\n\n    if (value) {\n      var currentPersonList = _toConsumableArray(personList); //Quick filter first or last name of an object if it matches\n      //Typed in text (since we're doing a simple iteration, we avoid\n      //repeating variables)\n\n\n      var filteredPersonList = currentPersonList.filter(function (p) {\n        return p.name.first.toLowerCase().includes(value) || p.name.last.toLowerCase().includes(value);\n      });\n      setPersonList(filteredPersonList);\n    } else {\n      setPersonList(personListSlice);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"listContainer\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        id: \"listOutput\",\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Space, {\n            id: \"searchSortDiv\",\n            direction: \"horizontal\",\n            size: \"middle\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"listSortFirstName\",\n              children: [\"Sort by First Name: \", /*#__PURE__*/_jsxDEV(SortAscendingOutlined, {\n                className: \"sortListLink\",\n                onClick: function onClick() {\n                  return sortAscending(true);\n                },\n                style: sortFirstNameAscSelected ? selectedSortStyle : null\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 17\n              }, this), \" \", \"/\", \" \", /*#__PURE__*/_jsxDEV(SortDescendingOutlined, {\n                className: \"sortListLink\",\n                onClick: function onClick() {\n                  return sortDescending(true);\n                },\n                style: sortFirstNameDescSelected ? selectedSortStyle : null\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"listSortLastName\",\n              children: [\"Sort by Last Name: \", /*#__PURE__*/_jsxDEV(SortAscendingOutlined, {\n                className: \"sortListLink\",\n                onClick: function onClick() {\n                  return sortAscending(false);\n                },\n                style: sortLastNameAscSelected ? selectedSortStyle : null\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 17\n              }, this), \" \", \"/\", \" \", /*#__PURE__*/_jsxDEV(SortDescendingOutlined, {\n                className: \"sortListLink\",\n                onClick: function onClick() {\n                  return sortDescending(false);\n                },\n                style: sortLastNameDescSelected ? selectedSortStyle : null\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"listFilterName\",\n              children: /*#__PURE__*/_jsxDEV(Search, {\n                id: \"filterSearchBar\",\n                placeholder: \"Search Name By Input\",\n                allowClear: true,\n                onSearch: filterByInput,\n                style: {\n                  width: 250\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: cardListOut\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ListMain, \"LWv6hFcL6ibuPTI+t5HiQpwMgd0=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = ListMain;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListMain\");","map":{"version":3,"sources":["C:/Users/paull/Desktop/mad-mobile-coding-challenge/src/List/ListMain.js"],"names":["useState","useEffect","Card","Col","Row","List","Space","Input","SortAscendingOutlined","SortDescendingOutlined","useSelector","useDispatch","setList","ListCard","selectedSortStyle","color","Search","ListMain","props","personListSlice","state","list","personList","isLoading","dispatch","setPersonList","sortFirstNameAscSelected","setSortFirstNameAscSelected","sortFirstNameDescSelected","setSortFirstNameDescSelected","sortLastNameAscSelected","setSortLastNameAscSelected","sortLastNameDescSelected","setSortLastNameDescSelected","personListRedux","editPerson","data","console","log","id","email","personListTemp","forEach","p","persId","editFailed","err","cardListOut","gutter","column","person","resetAllSortSetters","sortAscending","firstName","currentPersonList","sortedNameList","sort","a","b","name","first","toLowerCase","localeCompare","last","sortDescending","filterByInput","value","filteredPersonList","filter","includes","width"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { Card, Col, Row, List, Space, Input } from \"antd\";\r\nimport {\r\n  SortAscendingOutlined,\r\n  SortDescendingOutlined\r\n} from \"@ant-design/icons\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { setList } from \"../app/features/listSlice\";\r\n\r\n\r\nimport ListCard from \"./ListCard/ListCard\";\r\n\r\nconst selectedSortStyle = {\r\n  color: \"rgb(36, 67, 153)\"\r\n};\r\n\r\nconst { Search } = Input;\r\n\r\nexport default function ListMain(props) {\r\n\r\n   //General Rule for App: If Edit, update Redux State, for Sort use Comp State\r\n\r\n  const personListSlice = useSelector((state) => state.list.personList);\r\n  const isLoading = useSelector((state) => state.list.isLoading);\r\n\r\n  const dispatch = useDispatch(); \r\n\r\n  const [personList, setPersonList] = useState([]);\r\n\r\n  const [sortFirstNameAscSelected, setSortFirstNameAscSelected] = useState(false);\r\n  const [sortFirstNameDescSelected, setSortFirstNameDescSelected] = useState(false);\r\n  const [sortLastNameAscSelected, setSortLastNameAscSelected] = useState(false);\r\n  const [sortLastNameDescSelected, setSortLastNameDescSelected] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let personListRedux = [...personListSlice];\r\n    setPersonList(personListRedux);\r\n  },[personListSlice])\r\n\r\n  const editPerson = (data) => {\r\n    console.log(data);\r\n    let { id, email } = data;\r\n    let personListTemp = [...personListSlice];\r\n    personListTemp.forEach((p) => {\r\n      if (p.persId === id) {\r\n        p.email = email;\r\n      }\r\n    });\r\n    dispatch(setList(personList));\r\n  };\r\n\r\n  const editFailed = (err) => {\r\n    console.log(err);\r\n  };\r\n\r\n  //Will hold the results if there's a personList or not\r\n  let cardListOut = \"\";\r\n\r\n  if (personList) {\r\n    //AntDesign Card List, the List.Item is the ListCard.js file\r\n    //w/ passed in unique id's and keys\r\n    //edit functions are for lifting up state of any card edits (see above)\r\n    cardListOut = (\r\n      <List\r\n        grid={{\r\n          gutter: 16,\r\n          column: 5\r\n        }}\r\n        dataSource={personList}\r\n        renderItem={(person) => (\r\n          <List.Item>\r\n            <ListCard\r\n              key={person.persId}\r\n              id={person.persId}\r\n              person={person}\r\n              loading={isLoading}\r\n              editPersonFn={editPerson}\r\n              editFailedFn={editFailed}\r\n            />\r\n          </List.Item>\r\n        )}\r\n      />\r\n    );\r\n  } else {\r\n    //Null/empty check\r\n    cardListOut = (\r\n      <Card title=\"No Persons\" description=\"We could not find any persons\" />\r\n    );\r\n  }\r\n\r\n   //Quick way to reset all the sorting variables for sorting features\r\n  const resetAllSortSetters = () => {\r\n    setSortFirstNameAscSelected(false);\r\n    setSortFirstNameDescSelected(false);\r\n    setSortLastNameAscSelected(false);\r\n    setSortLastNameDescSelected(false);\r\n  };\r\n\r\n  //Ascending Sorting\r\n  const sortAscending = (firstName = true) => {\r\n    resetAllSortSetters(); //Reset all sorting flags\r\n    if (firstName) {\r\n      let currentPersonList = [...personList];\r\n\r\n      let sortedNameList = currentPersonList.sort((a, b) =>\r\n        a.name.first.toLowerCase().localeCompare(b.name.first.toLowerCase())\r\n      );\r\n      setSortFirstNameAscSelected(true);\r\n      setPersonList(sortedNameList); \r\n    } else {\r\n      //If firstName = false, sort Asc on the last name\r\n      let currentPersonList = [...personList];\r\n      let sortedNameList = currentPersonList.sort((a, b) =>\r\n        a.name.last.toLowerCase().localeCompare(b.name.last.toLowerCase())\r\n      );\r\n      setSortLastNameAscSelected(true);\r\n      setPersonList(sortedNameList);\r\n    }\r\n  };\r\n\r\n  const sortDescending = (firstName = true) => {\r\n    resetAllSortSetters();\r\n    if (firstName) {\r\n      let currentPersonList = [...personList];\r\n      let sortedNameList = currentPersonList.sort((a, b) =>\r\n        b.name.first.toLowerCase().localeCompare(a.name.first.toLowerCase())\r\n      );\r\n      setSortFirstNameDescSelected(true);\r\n      setPersonList(sortedNameList);\r\n    } else {\r\n      let currentPersonList = [...personList];\r\n      let sortedNameList = currentPersonList.sort((a, b) =>\r\n        b.name.last.toLowerCase().localeCompare(a.name.last.toLowerCase())\r\n      );\r\n      setSortLastNameDescSelected(true);\r\n      setPersonList(sortedNameList);\r\n    }\r\n  };\r\n\r\n  //Filtering the list via user input (the search bar on the screen)\r\n  const filterByInput = (value) => {\r\n    //Since we're not sorting, clear the flags\r\n    resetAllSortSetters();\r\n    //I've decided to filter on both the first or last names\r\n    if (value) {\r\n      let currentPersonList = [...personList];\r\n      //Quick filter first or last name of an object if it matches\r\n      //Typed in text (since we're doing a simple iteration, we avoid\r\n      //repeating variables)\r\n      let filteredPersonList = currentPersonList.filter(\r\n        (p) =>\r\n          p.name.first.toLowerCase().includes(value) ||\r\n          p.name.last.toLowerCase().includes(value)\r\n      );\r\n      setPersonList(filteredPersonList);\r\n    } else {\r\n      setPersonList(personListSlice);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"listContainer\">\r\n      <Row>\r\n        <Col id=\"listOutput\">\r\n          <Row>\r\n            <Space id=\"searchSortDiv\" direction=\"horizontal\" size=\"middle\">\r\n              <div id=\"listSortFirstName\">\r\n                {\"Sort by First Name: \"}\r\n                <SortAscendingOutlined\r\n                  className=\"sortListLink\"\r\n                  onClick={() => sortAscending(true)}\r\n                  style={sortFirstNameAscSelected ? selectedSortStyle : null}\r\n                />{\" \"}\r\n                {\"/\"}{\" \"}\r\n                <SortDescendingOutlined\r\n                  className=\"sortListLink\"\r\n                  onClick={() => sortDescending(true)}\r\n                  style={sortFirstNameDescSelected ? selectedSortStyle : null}\r\n                />\r\n              </div>\r\n              <div id=\"listSortLastName\">\r\n                {\"Sort by Last Name: \"}\r\n                <SortAscendingOutlined\r\n                  className=\"sortListLink\"\r\n                  onClick={() => sortAscending(false)}\r\n                  style={sortLastNameAscSelected ? selectedSortStyle : null}\r\n                />{\" \"}\r\n                {\"/\"}{\" \"}\r\n                <SortDescendingOutlined\r\n                  className=\"sortListLink\"\r\n                  onClick={() => sortDescending(false)}\r\n                  style={sortLastNameDescSelected ? selectedSortStyle : null}\r\n                />\r\n              </div>\r\n              <div id=\"listFilterName\">\r\n                <Search\r\n                  id=\"filterSearchBar\"\r\n                  placeholder=\"Search Name By Input\"\r\n                  allowClear\r\n                  onSearch={filterByInput}\r\n                  style={{ width: 250 }}\r\n                />\r\n              </div>\r\n            </Space>\r\n          </Row>\r\n          <Row>{cardListOut}</Row>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}