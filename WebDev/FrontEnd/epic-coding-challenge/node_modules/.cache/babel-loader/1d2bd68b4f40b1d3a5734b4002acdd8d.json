{"ast":null,"code":"import _objectSpread from \"C:/Users/paull/Desktop/mad-mobile-coding-challenge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"C:/Users/paull/Desktop/mad-mobile-coding-challenge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:/Users/paull/Desktop/mad-mobile-coding-challenge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\paull\\\\Desktop\\\\mad-mobile-coding-challenge\\\\src\\\\List\\\\ListMain.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { Card, Col, Row, List, Space, Input } from \"antd\";\nimport { SortAscendingOutlined, SortDescendingOutlined } from \"@ant-design/icons\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setList } from \"../app/features/listSlice\";\nimport uuid from \"react-uuid\";\nimport ListCard from \"./ListCard/ListCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar selectedSortStyle = {\n  color: \"rgb(36, 67, 153)\"\n};\nvar Search = Input.Search;\nexport default function ListMain() {\n  _s();\n\n  var _this = this;\n\n  //Choose to keep all logic within ListMain.js\n\n  /*\r\n  This is because we're using Redux Toolkit there's no\r\n  need to have the complexity of pushing up state unecessarily.\r\n  */\n  var dispatch = useDispatch(); //to store edits\n  //This is the local state variable for changes/edits & sorting/filtering\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      personList = _useState2[0],\n      setPersonList = _useState2[1];\n  /*\r\n  Created these 4 state vars to handle sorting and switching from Asc/Desc sort\r\n  as well as from First and Last name sorting\r\n  */\n\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      sortFirstNameAscSelected = _useState4[0],\n      setSortFirstNameAscSelected = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      sortFirstNameDescSelected = _useState6[0],\n      setSortFirstNameDescSelected = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      sortLastNameAscSelected = _useState8[0],\n      setSortLastNameAscSelected = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      sortLastNameDescSelected = _useState10[0],\n      setSortLastNameDescSelected = _useState10[1];\n  /*\r\n    I realized that I need a way to handle changes, which meant that I needed\r\n    a better 1-for-1 for an item changed and it's corresponding array obj\r\n    so I am using a \"persId\" with a uuid value so that it will be a more\r\n    direct 1-for-1 for any card edits\r\n  */\n\n\n  useEffect(function () {\n    if (personListSlice) {\n      var personListModified = _toConsumableArray(personListSlice);\n\n      for (var p = 0; p < personListModified.length; p++) {\n        var person = personListModified[p];\n        var newPersId = {\n          persId: uuid()\n        };\n        personListModified[p] = _objectSpread(_objectSpread({}, person), newPersId);\n      }\n\n      setPersonList(personListModified);\n    }\n  }, []); //Only run effect once\n\n  var editPerson = function editPerson(data) {\n    /*\r\n      data = {id: persId (see above), email: new email}\r\n      Because the persId and the data.id are a 1-for-1, the uuids \r\n      that match would be solid and this would avoid incorrect editing \r\n      of cards.\r\n      Choose to only do email for time reasons and because if we're trying\r\n      for phone and location editing, that would open a whole other can of \r\n      worms on how to implement it properly\r\n    */\n    var id = data.id,\n        email = data.email;\n    personList.forEach(function (p) {\n      if (p.persId === id) {\n        p.email = email;\n      }\n    }); //Set the updated array for 2-way card binding on page\n\n    setPersonList(personList); //Redux state edits to keep the Redux state in sync with local state\n    //We need to keep any updates in sync\n\n    dispatch(setList(personList));\n  };\n\n  var editFailed = function editFailed(err) {\n    console.log(err);\n  }; //Will hold the results if there's a personList or not\n\n\n  var cardListOut = \"\";\n\n  if (personList) {\n    //AntDesign Card List, the List.Item is the ListCard.js file\n    //w/ passed in unique id's and keys\n    //edit functions are for lifting up state of any card edits (see above)\n    cardListOut = /*#__PURE__*/_jsxDEV(List, {\n      grid: {\n        gutter: 16,\n        column: 3,\n        xs: 1,\n        sm: 2,\n        md: 4,\n        lg: 4,\n        xl: 6,\n        xxl: 3\n      },\n      dataSource: personList,\n      renderItem: function renderItem(person) {\n        return /*#__PURE__*/_jsxDEV(List.Item, {\n          children: /*#__PURE__*/_jsxDEV(ListCard, {\n            id: person.persId,\n            person: person,\n            loading: isLoading,\n            editPersonFn: editPerson,\n            editFailedFn: editFailed\n          }, person.persId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, _this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this);\n  } else {\n    //Null/empty check\n    cardListOut = /*#__PURE__*/_jsxDEV(Card, {\n      title: \"No Persons\",\n      description: \"We could not find any persons\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this);\n  } //Quick way to reset all the sorting variables for sorting features\n\n\n  var resetAllSortSetters = function resetAllSortSetters() {\n    setSortFirstNameAscSelected(false);\n    setSortFirstNameDescSelected(false);\n    setSortLastNameAscSelected(false);\n    setSortLastNameDescSelected(false);\n  }; //Ascending Sorting\n  //Modfied by passing in if it's for a first name or last name (firstName var)\n\n\n  var sortAscending = function sortAscending() {\n    var firstName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    resetAllSortSetters(); //Reset all sorting flags\n\n    if (firstName) {\n      //If firstName = true, sort Asc on the first name\n      var currentPersonList = _toConsumableArray(personList); //localeComparison on an all-lower case first name for accuracy\n\n\n      var sortedNameList = currentPersonList.sort(function (a, b) {\n        return a.name.first.toLowerCase().localeCompare(b.name.first.toLowerCase());\n      });\n      setSortFirstNameAscSelected(true); //Set First name Asc flag = true\n\n      setPersonList(sortedNameList); //Store sorted list in state\n    } else {\n      //If firstName = false, sort Asc on the last name\n      //See above for explination\n      var _currentPersonList = _toConsumableArray(personList);\n\n      var _sortedNameList = _currentPersonList.sort(function (a, b) {\n        return a.name.last.toLowerCase().localeCompare(b.name.last.toLowerCase());\n      });\n\n      setSortLastNameAscSelected(true);\n      setPersonList(_sortedNameList);\n    }\n  };\n\n  var sortDescending = function sortDescending() {\n    var firstName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    resetAllSortSetters();\n\n    if (firstName) {\n      var currentPersonList = _toConsumableArray(personList);\n\n      var sortedNameList = currentPersonList.sort(function (a, b) {\n        return b.name.first.toLowerCase().localeCompare(a.name.first.toLowerCase());\n      });\n      setSortFirstNameDescSelected(true);\n      setPersonList(sortedNameList);\n    } else {\n      var _currentPersonList2 = _toConsumableArray(personList);\n\n      var _sortedNameList2 = _currentPersonList2.sort(function (a, b) {\n        return b.name.last.toLowerCase().localeCompare(a.name.last.toLowerCase());\n      });\n\n      setSortLastNameDescSelected(true);\n      setPersonList(_sortedNameList2);\n    }\n  }; //Filtering the list via user input (the search bar on the screen)\n\n\n  var filterByInput = function filterByInput(value) {\n    //Since we're not sorting, clear the flags\n    resetAllSortSetters(); //I've decided to filter on both the first or last names\n    //Value check, if nothing typed in, push back the slice personList\n    //(This will also work for resetting to original state)\n\n    if (value) {\n      //Create new var with a copu of the personList\n      var currentPersonList = _toConsumableArray(personList); //Quick filter first or last name of an object if it matches\n      //Typed in text (since we're doing a simple iteration, we avoid\n      //repeating variables)\n\n\n      var filteredPersonList = currentPersonList.filter(function (p) {\n        return p.name.first.toLowerCase().includes(value) || p.name.last.toLowerCase().includes(value);\n      });\n      setPersonList(filteredPersonList);\n    } else {\n      setPersonList(personListSlice);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"listContainer\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        id: \"listOutput\",\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Space, {\n            direction: \"horizontal\",\n            size: \"middle\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"listSortFirstName\",\n              children: [\"Sort by First Name: \", /*#__PURE__*/_jsxDEV(SortAscendingOutlined, {\n                className: \"sortListLink\",\n                onClick: function onClick() {\n                  return sortAscending(true);\n                },\n                style: sortFirstNameAscSelected ? selectedSortStyle : null\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 17\n              }, this), \" \", \"/\", \" \", /*#__PURE__*/_jsxDEV(SortDescendingOutlined, {\n                className: \"sortListLink\",\n                onClick: function onClick() {\n                  return sortDescending(true);\n                },\n                style: sortFirstNameDescSelected ? selectedSortStyle : null\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"listSortLastName\",\n              children: [\"Sort by Last Name: \", /*#__PURE__*/_jsxDEV(SortAscendingOutlined, {\n                className: \"sortListLink\",\n                onClick: function onClick() {\n                  return sortAscending(false);\n                },\n                style: sortLastNameAscSelected ? selectedSortStyle : null\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 17\n              }, this), \" \", \"/\", \" \", /*#__PURE__*/_jsxDEV(SortDescendingOutlined, {\n                className: \"sortListLink\",\n                onClick: function onClick() {\n                  return sortDescending(false);\n                },\n                style: sortLastNameDescSelected ? selectedSortStyle : null\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"listFilterName\",\n              children: /*#__PURE__*/_jsxDEV(Search, {\n                id: \"filterSearchBar\",\n                placeholder: \"Search Name By Input\",\n                allowClear: true,\n                onSearch: filterByInput,\n                style: {\n                  width: 250\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: cardListOut\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ListMain, \"JYyXZ/Cz6dqQVUVm32FbpygIcfo=\", false, function () {\n  return [useDispatch];\n});\n\n_c = ListMain;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListMain\");","map":{"version":3,"sources":["C:/Users/paull/Desktop/mad-mobile-coding-challenge/src/List/ListMain.js"],"names":["useState","useEffect","Card","Col","Row","List","Space","Input","SortAscendingOutlined","SortDescendingOutlined","useSelector","useDispatch","setList","uuid","ListCard","selectedSortStyle","color","Search","ListMain","dispatch","personList","setPersonList","sortFirstNameAscSelected","setSortFirstNameAscSelected","sortFirstNameDescSelected","setSortFirstNameDescSelected","sortLastNameAscSelected","setSortLastNameAscSelected","sortLastNameDescSelected","setSortLastNameDescSelected","personListSlice","personListModified","p","length","person","newPersId","persId","editPerson","data","id","email","forEach","editFailed","err","console","log","cardListOut","gutter","column","xs","sm","md","lg","xl","xxl","isLoading","resetAllSortSetters","sortAscending","firstName","currentPersonList","sortedNameList","sort","a","b","name","first","toLowerCase","localeCompare","last","sortDescending","filterByInput","value","filteredPersonList","filter","includes","width"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { Card, Col, Row, List, Space, Input } from \"antd\";\r\nimport {\r\n  SortAscendingOutlined,\r\n  SortDescendingOutlined\r\n} from \"@ant-design/icons\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { setList } from \"../app/features/listSlice\";\r\nimport uuid from \"react-uuid\";\r\n\r\nimport ListCard from \"./ListCard/ListCard\";\r\n\r\nconst selectedSortStyle = {\r\n  color: \"rgb(36, 67, 153)\"\r\n};\r\n\r\nconst { Search } = Input;\r\n\r\nexport default function ListMain() {\r\n  //Choose to keep all logic within ListMain.js\r\n  /*\r\n  This is because we're using Redux Toolkit there's no\r\n  need to have the complexity of pushing up state unecessarily.\r\n  */\r\n  const dispatch = useDispatch(); //to store edits\r\n  //This is the local state variable for changes/edits & sorting/filtering\r\n  const [personList, setPersonList] = useState([]);\r\n\r\n  /*\r\n  Created these 4 state vars to handle sorting and switching from Asc/Desc sort\r\n  as well as from First and Last name sorting\r\n  */\r\n  const [sortFirstNameAscSelected, setSortFirstNameAscSelected] = useState(false);\r\n  const [sortFirstNameDescSelected, setSortFirstNameDescSelected] = useState(false);\r\n  const [sortLastNameAscSelected, setSortLastNameAscSelected] = useState(false);\r\n  const [sortLastNameDescSelected, setSortLastNameDescSelected] = useState(false);\r\n\r\n  /*\r\n    I realized that I need a way to handle changes, which meant that I needed\r\n    a better 1-for-1 for an item changed and it's corresponding array obj\r\n    so I am using a \"persId\" with a uuid value so that it will be a more\r\n    direct 1-for-1 for any card edits\r\n  */\r\n  useEffect(() => {\r\n    if (personListSlice) {\r\n      let personListModified = [...personListSlice];\r\n\r\n      for (let p = 0; p < personListModified.length; p++) {\r\n        let person = personListModified[p];\r\n        let newPersId = {\r\n          persId: uuid()\r\n        };\r\n        personListModified[p] = { ...person, ...newPersId };\r\n      }\r\n      setPersonList(personListModified);\r\n    }\r\n  }, []); //Only run effect once\r\n\r\n  const editPerson = (data) => {\r\n    /*\r\n      data = {id: persId (see above), email: new email}\r\n      Because the persId and the data.id are a 1-for-1, the uuids \r\n      that match would be solid and this would avoid incorrect editing \r\n      of cards.\r\n      Choose to only do email for time reasons and because if we're trying\r\n      for phone and location editing, that would open a whole other can of \r\n      worms on how to implement it properly\r\n    */\r\n    let { id, email } = data;\r\n    personList.forEach((p) => {\r\n      if (p.persId === id) {\r\n        p.email = email;\r\n      }\r\n    });\r\n    //Set the updated array for 2-way card binding on page\r\n    setPersonList(personList);\r\n    //Redux state edits to keep the Redux state in sync with local state\r\n    //We need to keep any updates in sync\r\n    dispatch(setList(personList));\r\n  };\r\n\r\n  const editFailed = (err) => {\r\n    console.log(err);\r\n  };\r\n\r\n  //Will hold the results if there's a personList or not\r\n  let cardListOut = \"\";\r\n\r\n  if (personList) {\r\n    //AntDesign Card List, the List.Item is the ListCard.js file\r\n    //w/ passed in unique id's and keys\r\n    //edit functions are for lifting up state of any card edits (see above)\r\n    cardListOut = (\r\n      <List\r\n        grid={{\r\n          gutter: 16,\r\n          column: 3,\r\n          xs: 1,\r\n          sm: 2,\r\n          md: 4,\r\n          lg: 4,\r\n          xl: 6,\r\n          xxl: 3\r\n        }}\r\n        dataSource={personList}\r\n        renderItem={(person) => (\r\n          <List.Item>\r\n            <ListCard\r\n              key={person.persId}\r\n              id={person.persId}\r\n              person={person}\r\n              loading={isLoading}\r\n              editPersonFn={editPerson}\r\n              editFailedFn={editFailed}\r\n            />\r\n          </List.Item>\r\n        )}\r\n      />\r\n    );\r\n  } else {\r\n    //Null/empty check\r\n    cardListOut = (\r\n      <Card title=\"No Persons\" description=\"We could not find any persons\" />\r\n    );\r\n  }\r\n\r\n  //Quick way to reset all the sorting variables for sorting features\r\n  const resetAllSortSetters = () => {\r\n    setSortFirstNameAscSelected(false);\r\n    setSortFirstNameDescSelected(false);\r\n    setSortLastNameAscSelected(false);\r\n    setSortLastNameDescSelected(false);\r\n  };\r\n\r\n  //Ascending Sorting\r\n  //Modfied by passing in if it's for a first name or last name (firstName var)\r\n  const sortAscending = (firstName = true) => {\r\n    resetAllSortSetters(); //Reset all sorting flags\r\n    if (firstName) {\r\n      //If firstName = true, sort Asc on the first name\r\n      let currentPersonList = [...personList];\r\n      //localeComparison on an all-lower case first name for accuracy\r\n      let sortedNameList = currentPersonList.sort((a, b) =>\r\n        a.name.first.toLowerCase().localeCompare(b.name.first.toLowerCase())\r\n      );\r\n      setSortFirstNameAscSelected(true); //Set First name Asc flag = true\r\n      setPersonList(sortedNameList); //Store sorted list in state\r\n    } else {\r\n      //If firstName = false, sort Asc on the last name\r\n      //See above for explination\r\n      let currentPersonList = [...personList];\r\n      let sortedNameList = currentPersonList.sort((a, b) =>\r\n        a.name.last.toLowerCase().localeCompare(b.name.last.toLowerCase())\r\n      );\r\n      setSortLastNameAscSelected(true);\r\n      setPersonList(sortedNameList);\r\n    }\r\n  };\r\n\r\n  const sortDescending = (firstName = true) => {\r\n    resetAllSortSetters();\r\n    if (firstName) {\r\n      let currentPersonList = [...personList];\r\n      let sortedNameList = currentPersonList.sort((a, b) =>\r\n        b.name.first.toLowerCase().localeCompare(a.name.first.toLowerCase())\r\n      );\r\n      setSortFirstNameDescSelected(true);\r\n      setPersonList(sortedNameList);\r\n    } else {\r\n      let currentPersonList = [...personList];\r\n      let sortedNameList = currentPersonList.sort((a, b) =>\r\n        b.name.last.toLowerCase().localeCompare(a.name.last.toLowerCase())\r\n      );\r\n      setSortLastNameDescSelected(true);\r\n      setPersonList(sortedNameList);\r\n    }\r\n  };\r\n\r\n  //Filtering the list via user input (the search bar on the screen)\r\n  const filterByInput = (value) => {\r\n    //Since we're not sorting, clear the flags\r\n    resetAllSortSetters();\r\n    //I've decided to filter on both the first or last names\r\n    //Value check, if nothing typed in, push back the slice personList\r\n    //(This will also work for resetting to original state)\r\n    if (value) {\r\n      //Create new var with a copu of the personList\r\n      let currentPersonList = [...personList];\r\n      //Quick filter first or last name of an object if it matches\r\n      //Typed in text (since we're doing a simple iteration, we avoid\r\n      //repeating variables)\r\n      let filteredPersonList = currentPersonList.filter(\r\n        (p) =>\r\n          p.name.first.toLowerCase().includes(value) ||\r\n          p.name.last.toLowerCase().includes(value)\r\n      );\r\n      setPersonList(filteredPersonList);\r\n    } else {\r\n      setPersonList(personListSlice);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"listContainer\">\r\n      <Row>\r\n        <Col id=\"listOutput\">\r\n          <Row>\r\n            <Space direction=\"horizontal\" size=\"middle\">\r\n              <div id=\"listSortFirstName\">\r\n                {\"Sort by First Name: \"}\r\n                <SortAscendingOutlined\r\n                  className=\"sortListLink\"\r\n                  onClick={() => sortAscending(true)}\r\n                  style={sortFirstNameAscSelected ? selectedSortStyle : null}\r\n                />{\" \"}\r\n                {\"/\"}{\" \"}\r\n                <SortDescendingOutlined\r\n                  className=\"sortListLink\"\r\n                  onClick={() => sortDescending(true)}\r\n                  style={sortFirstNameDescSelected ? selectedSortStyle : null}\r\n                />\r\n              </div>\r\n              <div id=\"listSortLastName\">\r\n                {\"Sort by Last Name: \"}\r\n                <SortAscendingOutlined\r\n                  className=\"sortListLink\"\r\n                  onClick={() => sortAscending(false)}\r\n                  style={sortLastNameAscSelected ? selectedSortStyle : null}\r\n                />{\" \"}\r\n                {\"/\"}{\" \"}\r\n                <SortDescendingOutlined\r\n                  className=\"sortListLink\"\r\n                  onClick={() => sortDescending(false)}\r\n                  style={sortLastNameDescSelected ? selectedSortStyle : null}\r\n                />\r\n              </div>\r\n              <div id=\"listFilterName\">\r\n                <Search\r\n                  id=\"filterSearchBar\"\r\n                  placeholder=\"Search Name By Input\"\r\n                  allowClear\r\n                  onSearch={filterByInput}\r\n                  style={{ width: 250 }}\r\n                />\r\n              </div>\r\n            </Space>\r\n          </Row>\r\n          <Row>{cardListOut}</Row>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}