{"ast":null,"code":"import _slicedToArray from \"C:/Users/paull/Desktop/mad-mobile-coding-challenge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\paull\\\\Desktop\\\\mad-mobile-coding-challenge\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport \"./styles.css\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setList, setIsLoading } from \"./app/features/listSlice\";\nimport uuid from \"react-uuid\";\nimport LayoutContainer from \"./Layout/LayoutContainer\";\nimport ListMain from \"./List/ListMain\";\nimport ErrorMain from \"./Error/ErrorMain\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  //Redux dispatch call\n  //Note: the Redux I vers I'm using is ReduxJS Toolkit\n  //(A LOT less overhead and easier to use) (check App folder for implementation)\n  var dispatch = useDispatch(); //State-level error handling\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isError = _useState2[0],\n      setIsError = _useState2[1];\n\n  useEffect(function () {\n    //Set loading to true before API call\n    dispatch(setIsLoading(true)); //Using Axios (used to it), with a catch for errors\n\n    axios.get(\"https://randomuser.me/api/?results=25\").then(function (res) {\n      //If good, store list in Redux store, set loading to false\n      console.log(res);\n    }).catch(function (err) {\n      //If error, set state variable to true\n      //Set Redux store list to empty, set loading to false\n      setIsError(true);\n      dispatch(setList([]));\n      dispatch(setIsLoading(false));\n    });\n  }, []);\n  var personListSlice = useSelector(function (state) {\n    return state.list.personList;\n  }); //Will output the results of above\n\n  var contentOutput = \"\";\n\n  if (isError) {\n    //If error, show the error component\n    contentOutput = /*#__PURE__*/_jsxDEV(ErrorMain, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }, this);\n  } else {\n    //Else show the actual list\n    contentOutput = /*#__PURE__*/_jsxDEV(ListMain, {\n      personList: personListSlice\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 21\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(LayoutContainer, {\n      children: isError ? /*#__PURE__*/_jsxDEV(ErrorMain, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(ListMain, {\n        personList: personListSlice\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"3BEl99MGGxQiBy1wMicFahaJ5UI=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/paull/Desktop/mad-mobile-coding-challenge/src/App.js"],"names":["useEffect","useState","axios","useDispatch","useSelector","setList","setIsLoading","uuid","LayoutContainer","ListMain","ErrorMain","App","dispatch","isError","setIsError","get","then","res","console","log","catch","err","personListSlice","state","list","personList","contentOutput"],"mappings":";;;;;AAAA,OAAO,cAAP;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,OAAT,EAAkBC,YAAlB,QAAsC,0BAAtC;AACA,OAAOC,IAAP,MAAiB,YAAjB;AAEA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,SAAP,MAAsB,mBAAtB;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B;AACA;AACA;AACA,MAAMC,QAAQ,GAAGT,WAAW,EAA5B,CAJ4B,CAM5B;;AACA,kBAA8BF,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOY,OAAP;AAAA,MAAgBC,UAAhB;;AAEAd,EAAAA,SAAS,CAAC,YAAM;AACd;AACAY,IAAAA,QAAQ,CAACN,YAAY,CAAC,IAAD,CAAb,CAAR,CAFc,CAGd;;AACAJ,IAAAA,KAAK,CACFa,GADH,CACO,uCADP,EAEGC,IAFH,CAEQ,UAACC,GAAD,EAAS;AACb;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KALH,EAMGG,KANH,CAMS,UAACC,GAAD,EAAS;AACd;AACA;AACAP,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAF,MAAAA,QAAQ,CAACP,OAAO,CAAC,EAAD,CAAR,CAAR;AACAO,MAAAA,QAAQ,CAACN,YAAY,CAAC,KAAD,CAAb,CAAR;AACD,KAZH;AAaD,GAjBQ,EAiBN,EAjBM,CAAT;AAmBA,MAAMgB,eAAe,GAAGlB,WAAW,CAAC,UAACmB,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAN,CAAWC,UAAtB;AAAA,GAAD,CAAnC,CA5B4B,CA8B5B;;AACA,MAAIC,aAAa,GAAG,EAApB;;AACA,MAAIb,OAAJ,EAAa;AACX;AACAa,IAAAA,aAAa,gBAAG,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YAAhB;AACD,GAHD,MAGO;AACL;AACAA,IAAAA,aAAa,gBAAG,QAAC,QAAD;AAChB,MAAA,UAAU,EAAEJ;AADI;AAAA;AAAA;AAAA;AAAA,YAAhB;AAGD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE,QAAC,eAAD;AAAA,gBACAT,OAAO,gBACL,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,cADK,gBAEH,QAAC,QAAD;AACA,QAAA,UAAU,EAAES;AADZ;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GArDuBX,G;UAILR,W,EAwBOC,W;;;KA5BFO,G","sourcesContent":["import \"./styles.css\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setList, setIsLoading } from \"./app/features/listSlice\";\nimport uuid from \"react-uuid\";\n\nimport LayoutContainer from \"./Layout/LayoutContainer\";\nimport ListMain from \"./List/ListMain\";\nimport ErrorMain from \"./Error/ErrorMain\";\n\nexport default function App() {\n  //Redux dispatch call\n  //Note: the Redux I vers I'm using is ReduxJS Toolkit\n  //(A LOT less overhead and easier to use) (check App folder for implementation)\n  const dispatch = useDispatch();\n\n  //State-level error handling\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    //Set loading to true before API call\n    dispatch(setIsLoading(true));\n    //Using Axios (used to it), with a catch for errors\n    axios\n      .get(\"https://randomuser.me/api/?results=25\")\n      .then((res) => {\n        //If good, store list in Redux store, set loading to false\n        console.log(res);\n      })\n      .catch((err) => {\n        //If error, set state variable to true\n        //Set Redux store list to empty, set loading to false\n        setIsError(true);\n        dispatch(setList([]));\n        dispatch(setIsLoading(false));\n      });\n  }, []);\n\n  const personListSlice = useSelector((state) => state.list.personList);\n\n  //Will output the results of above\n  let contentOutput = \"\";\n  if (isError) {\n    //If error, show the error component\n    contentOutput = <ErrorMain />;\n  } else {\n    //Else show the actual list\n    contentOutput = <ListMain\n    personList={personListSlice}\n    />;\n  }\n\n  return (\n    <div className=\"App\">\n      <LayoutContainer>{\n      isError ? \n        <ErrorMain /> : \n          <ListMain\n          personList={personListSlice}\n          />\n      }</LayoutContainer>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}