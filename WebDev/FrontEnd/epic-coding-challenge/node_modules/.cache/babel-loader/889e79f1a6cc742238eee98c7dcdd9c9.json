{"ast":null,"code":"import _slicedToArray from \"C:/Users/paull/Desktop/mad-mobile-coding-challenge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\paull\\\\Desktop\\\\mad-mobile-coding-challenge\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport \"./styles.css\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useDispatch } from \"react-redux\";\nimport { setList, setIsLoading } from \"./app/features/listSlice\";\nimport LayoutContainer from \"./Layout/LayoutContainer\";\nimport ListMain from \"./List/ListMain\";\nimport ErrorMain from \"./Error/ErrorMain\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  //Redux dispatch call\n  //Note: the Redux I vers I'm using is ReduxJS Toolkit\n  //(A LOT less overhead and easier to use) (check App folder for implementation)\n  var dispatch = useDispatch();\n  var personListSlice = useSelector(function (state) {\n    return state.list.personList;\n  }); //State-level error handling\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isError = _useState2[0],\n      setIsError = _useState2[1];\n\n  useEffect(function () {\n    //Set loading to true before API call\n    dispatch(setIsLoading(true)); //Using Axios (used to it), with a catch for errors\n\n    axios.get(\"https://randomuser.me/api/?results=25\").then(function (res) {\n      //If good, store list in Redux store, set loading to false\n      dispatch(setList(res.data.results));\n      dispatch(setIsLoading(false));\n    }).catch(function (err) {\n      //If error, set state variable to true\n      //Set Redux store list to empty, set loading to false\n      setIsError(true);\n      dispatch(setList([]));\n      dispatch(setIsLoading(false));\n    });\n  }, []); //Will output the results of above\n\n  var contentOutput = \"\";\n\n  if (isError) {\n    //If error, show the error component\n    contentOutput = /*#__PURE__*/_jsxDEV(ErrorMain, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 21\n    }, this);\n  } else {\n    //Else show the actual list\n    contentOutput = /*#__PURE__*/_jsxDEV(ListMain, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 21\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(LayoutContainer, {\n      children: contentOutput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"2CQX2ibI5gd6/igQG23wSKDU6RA=\", true, function () {\n  return [useDispatch];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/paull/Desktop/mad-mobile-coding-challenge/src/App.js"],"names":["useEffect","useState","axios","useDispatch","setList","setIsLoading","LayoutContainer","ListMain","ErrorMain","App","dispatch","personListSlice","useSelector","state","list","personList","isError","setIsError","get","then","res","data","results","catch","err","contentOutput"],"mappings":";;;;;AAAA,OAAO,cAAP;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,OAAT,EAAkBC,YAAlB,QAAsC,0BAAtC;AAEA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,SAAP,MAAsB,mBAAtB;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B;AACA;AACA;AACA,MAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,MAAMQ,eAAe,GAAGC,WAAW,CAAC,UAACC,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAN,CAAWC,UAAtB;AAAA,GAAD,CAAnC,CAL4B,CAO5B;;AACA,kBAA8Bd,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOe,OAAP;AAAA,MAAgBC,UAAhB;;AAEAjB,EAAAA,SAAS,CAAC,YAAM;AACd;AACAU,IAAAA,QAAQ,CAACL,YAAY,CAAC,IAAD,CAAb,CAAR,CAFc,CAGd;;AACAH,IAAAA,KAAK,CACFgB,GADH,CACO,uCADP,EAEGC,IAFH,CAEQ,UAACC,GAAD,EAAS;AACb;AACAV,MAAAA,QAAQ,CAACN,OAAO,CAACgB,GAAG,CAACC,IAAJ,CAASC,OAAV,CAAR,CAAR;AACAZ,MAAAA,QAAQ,CAACL,YAAY,CAAC,KAAD,CAAb,CAAR;AACD,KANH,EAOGkB,KAPH,CAOS,UAACC,GAAD,EAAS;AACd;AACA;AACAP,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAP,MAAAA,QAAQ,CAACN,OAAO,CAAC,EAAD,CAAR,CAAR;AACAM,MAAAA,QAAQ,CAACL,YAAY,CAAC,KAAD,CAAb,CAAR;AACD,KAbH;AAcD,GAlBQ,EAkBN,EAlBM,CAAT,CAV4B,CA8B5B;;AACA,MAAIoB,aAAa,GAAG,EAApB;;AACA,MAAIT,OAAJ,EAAa;AACX;AACAS,IAAAA,aAAa,gBAAG,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YAAhB;AACD,GAHD,MAGO;AACL;AACAA,IAAAA,aAAa,gBAAG,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YAAhB;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE,QAAC,eAAD;AAAA,gBAAkBA;AAAlB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GA7CuBhB,G;UAILN,W;;;KAJKM,G","sourcesContent":["import \"./styles.css\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useDispatch } from \"react-redux\";\nimport { setList, setIsLoading } from \"./app/features/listSlice\";\n\nimport LayoutContainer from \"./Layout/LayoutContainer\";\nimport ListMain from \"./List/ListMain\";\nimport ErrorMain from \"./Error/ErrorMain\";\n\nexport default function App() {\n  //Redux dispatch call\n  //Note: the Redux I vers I'm using is ReduxJS Toolkit\n  //(A LOT less overhead and easier to use) (check App folder for implementation)\n  const dispatch = useDispatch();\n  const personListSlice = useSelector((state) => state.list.personList);\n\n  //State-level error handling\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    //Set loading to true before API call\n    dispatch(setIsLoading(true));\n    //Using Axios (used to it), with a catch for errors\n    axios\n      .get(\"https://randomuser.me/api/?results=25\")\n      .then((res) => {\n        //If good, store list in Redux store, set loading to false\n        dispatch(setList(res.data.results));\n        dispatch(setIsLoading(false));\n      })\n      .catch((err) => {\n        //If error, set state variable to true\n        //Set Redux store list to empty, set loading to false\n        setIsError(true);\n        dispatch(setList([]));\n        dispatch(setIsLoading(false));\n      });\n  }, []);\n\n  //Will output the results of above\n  let contentOutput = \"\";\n  if (isError) {\n    //If error, show the error component\n    contentOutput = <ErrorMain />;\n  } else {\n    //Else show the actual list\n    contentOutput = <ListMain />;\n  }\n\n  return (\n    <div className=\"App\">\n      <LayoutContainer>{contentOutput}</LayoutContainer>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}