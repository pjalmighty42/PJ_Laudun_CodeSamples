{"ast":null,"code":"import _objectSpread from \"C:/Users/paull/Desktop/mad-mobile-coding-challenge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"C:/Users/paull/Desktop/mad-mobile-coding-challenge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:/Users/paull/Desktop/mad-mobile-coding-challenge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\paull\\\\Desktop\\\\mad-mobile-coding-challenge\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport \"./styles.css\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setList, setIsLoading } from \"./app/features/listSlice\";\nimport uuid from \"react-uuid\";\nimport LayoutContainer from \"./Layout/LayoutContainer\";\nimport ListMain from \"./List/ListMain\";\nimport ErrorMain from \"./Error/ErrorMain\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  //Redux dispatch call\n  //Note: the Redux I vers I'm using is ReduxJS Toolkit\n  //(A LOT less overhead and easier to use) (check App folder for implementation)\n  var dispatch = useDispatch(); //State-level error handling\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isError = _useState2[0],\n      setIsError = _useState2[1];\n\n  useEffect(function () {\n    //Set loading to true before API call\n    dispatch(setIsLoading(true)); //Using Axios (used to it), with a catch for errors\n\n    axios.get(\"https://randomuser.me/api/?results=25\").then(function (res) {\n      //If good, store list in Redux store, set loading to false\n      var personListModified = _toConsumableArray(res.data.results);\n\n      for (var p = 0; p < personListModified.length; p++) {\n        var person = personListModified[p];\n        var newPersId = {\n          persId: uuid()\n        };\n        personListModified[p] = _objectSpread(_objectSpread({}, person), newPersId);\n      }\n\n      dispatch(setList(personListModified));\n      dispatch(setIsLoading(false));\n    }).catch(function (err) {\n      //If error, set state variable to true\n      //Set Redux store list to empty, set loading to false\n      setIsError(true);\n      dispatch(setList([]));\n      dispatch(setIsLoading(false));\n    });\n  }, []);\n  var personListSlice = useSelector(function (state) {\n    return state.list.personList;\n  }); //Will output the results of above\n\n  var contentOutput = \"\";\n\n  if (isError) {\n    //If error, show the error component\n    contentOutput = /*#__PURE__*/_jsxDEV(ErrorMain, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 21\n    }, this);\n  } else {\n    //Else show the actual list\n    contentOutput = /*#__PURE__*/_jsxDEV(ListMain, {\n      personList: personListSlice\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(LayoutContainer, {\n      children: contentOutput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"3BEl99MGGxQiBy1wMicFahaJ5UI=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/paull/Desktop/mad-mobile-coding-challenge/src/App.js"],"names":["useEffect","useState","axios","useDispatch","useSelector","setList","setIsLoading","uuid","LayoutContainer","ListMain","ErrorMain","App","dispatch","isError","setIsError","get","then","res","personListModified","data","results","p","length","person","newPersId","persId","catch","err","personListSlice","state","list","personList","contentOutput"],"mappings":";;;;;;;AAAA,OAAO,cAAP;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,OAAT,EAAkBC,YAAlB,QAAsC,0BAAtC;AACA,OAAOC,IAAP,MAAiB,YAAjB;AAEA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,SAAP,MAAsB,mBAAtB;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B;AACA;AACA;AACA,MAAMC,QAAQ,GAAGT,WAAW,EAA5B,CAJ4B,CAM5B;;AACA,kBAA8BF,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOY,OAAP;AAAA,MAAgBC,UAAhB;;AAEAd,EAAAA,SAAS,CAAC,YAAM;AACd;AACAY,IAAAA,QAAQ,CAACN,YAAY,CAAC,IAAD,CAAb,CAAR,CAFc,CAGd;;AACAJ,IAAAA,KAAK,CACFa,GADH,CACO,uCADP,EAEGC,IAFH,CAEQ,UAACC,GAAD,EAAS;AACb;AACA,UAAIC,kBAAkB,sBAAOD,GAAG,CAACE,IAAJ,CAASC,OAAhB,CAAtB;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,kBAAkB,CAACI,MAAvC,EAA+CD,CAAC,EAAhD,EAAoD;AAClD,YAAIE,MAAM,GAAGL,kBAAkB,CAACG,CAAD,CAA/B;AACA,YAAIG,SAAS,GAAG;AACdC,UAAAA,MAAM,EAAElB,IAAI;AADE,SAAhB;AAGAW,QAAAA,kBAAkB,CAACG,CAAD,CAAlB,mCAA6BE,MAA7B,GAAwCC,SAAxC;AACD;;AAEDZ,MAAAA,QAAQ,CAACP,OAAO,CAACa,kBAAD,CAAR,CAAR;AACAN,MAAAA,QAAQ,CAACN,YAAY,CAAC,KAAD,CAAb,CAAR;AACD,KAhBH,EAiBGoB,KAjBH,CAiBS,UAACC,GAAD,EAAS;AACd;AACA;AACAb,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAF,MAAAA,QAAQ,CAACP,OAAO,CAAC,EAAD,CAAR,CAAR;AACAO,MAAAA,QAAQ,CAACN,YAAY,CAAC,KAAD,CAAb,CAAR;AACD,KAvBH;AAwBD,GA5BQ,EA4BN,EA5BM,CAAT;AA8BA,MAAMsB,eAAe,GAAGxB,WAAW,CAAC,UAACyB,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAN,CAAWC,UAAtB;AAAA,GAAD,CAAnC,CAvC4B,CAyC5B;;AACA,MAAIC,aAAa,GAAG,EAApB;;AACA,MAAInB,OAAJ,EAAa;AACX;AACAmB,IAAAA,aAAa,gBAAG,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YAAhB;AACD,GAHD,MAGO;AACL;AACAA,IAAAA,aAAa,gBAAG,QAAC,QAAD;AAChB,MAAA,UAAU,EAAEJ;AADI;AAAA;AAAA;AAAA;AAAA,YAAhB;AAGD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE,QAAC,eAAD;AAAA,gBAAkBI;AAAlB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GA1DuBrB,G;UAILR,W,EAmCOC,W;;;KAvCFO,G","sourcesContent":["import \"./styles.css\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setList, setIsLoading } from \"./app/features/listSlice\";\nimport uuid from \"react-uuid\";\n\nimport LayoutContainer from \"./Layout/LayoutContainer\";\nimport ListMain from \"./List/ListMain\";\nimport ErrorMain from \"./Error/ErrorMain\";\n\nexport default function App() {\n  //Redux dispatch call\n  //Note: the Redux I vers I'm using is ReduxJS Toolkit\n  //(A LOT less overhead and easier to use) (check App folder for implementation)\n  const dispatch = useDispatch();\n\n  //State-level error handling\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    //Set loading to true before API call\n    dispatch(setIsLoading(true));\n    //Using Axios (used to it), with a catch for errors\n    axios\n      .get(\"https://randomuser.me/api/?results=25\")\n      .then((res) => {\n        //If good, store list in Redux store, set loading to false\n        let personListModified = [...res.data.results];\n\n        for (let p = 0; p < personListModified.length; p++) {\n          let person = personListModified[p];\n          let newPersId = {\n            persId: uuid()\n          };\n          personListModified[p] = { ...person, ...newPersId };\n        }\n\n        dispatch(setList(personListModified));\n        dispatch(setIsLoading(false));\n      })\n      .catch((err) => {\n        //If error, set state variable to true\n        //Set Redux store list to empty, set loading to false\n        setIsError(true);\n        dispatch(setList([]));\n        dispatch(setIsLoading(false));\n      });\n  }, []);\n\n  const personListSlice = useSelector((state) => state.list.personList);\n\n  //Will output the results of above\n  let contentOutput = \"\";\n  if (isError) {\n    //If error, show the error component\n    contentOutput = <ErrorMain />;\n  } else {\n    //Else show the actual list\n    contentOutput = <ListMain\n    personList={personListSlice}\n    />;\n  }\n\n  return (\n    <div className=\"App\">\n      <LayoutContainer>{contentOutput}</LayoutContainer>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}